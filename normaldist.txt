B2) noraml dist. skewness and kutosis

 import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from scipy.stats import norm, skew, kurtosis

# Set a seed for reproducibility
np.random.seed(42)

# Generate synthetic data for test results (assuming a normal distribution)
mean_score = 70
std_deviation = 15
num_students = 1000

test_results = np.random.normal(mean_score, std_deviation, num_students)

# Plot the normal distribution
sns.histplot(test_results, kde=True, color='blue', bins=30)
plt.title('Normal Distribution of Test Results')
plt.xlabel('Test Scores')
plt.ylabel('Frequency')
plt.show()

# Calculate skewness and kurtosis
skewness_value = skew(test_results)
kurtosis_value = kurtosis(test_results)

print("Skewness:", skewness_value)
print("Kurtosis:", kurtosis_value)


================================oooooooooorrrrrrrrrrrr======================================

import matplotlib.pyplot as plt
import numpy as np
from scipy.stats import norm, skew, kurtosis

# Generate a random dataset with a normal distribution (mean=70, std=15)
np.random.seed(42)
test_results = np.random.normal(loc=70, scale=15, size=1000)

# Plot the normal distribution
plt.figure(figsize=(10, 6))
plt.hist(test_results, bins=30, density=True, alpha=0.7, color='blue')

# Fit a normal distribution to the data
mu, std = norm.fit(test_results)
xmin, xmax = plt.xlim()
x = np.linspace(xmin, xmax, 100)
p = norm.pdf(x, mu, std)
plt.plot(x, p, 'k', linewidth=2)

plt.title('Normal Distribution of Class Test Results')
plt.xlabel('Test Results')
plt.ylabel('Frequency')

# Identify skewness and kurtosis
skewness = skew(test_results)
kurt = kurtosis(test_results)

plt.text(90, 0.02, f'Skewness: {skewness:.2f}\nKurtosis: {kurt:.2f}', fontsize=12, color='red')

plt.show()
