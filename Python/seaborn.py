# -*- coding: utf-8 -*-
"""seaborn

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1XR_Sn-n2VNFz9T_PjI__VVC-VqiG9gTK
"""

import seaborn as sns
import matplotlib.pyplot as plt
tips=sns.load_dataset("tips")
sns.boxplot(x='day',y='total_bill' , data=tips)
plt.show()

sns.pointplot(x='day',y='total_bill' , data=tips)
plt.show()

sns.jointplot(x='day',y='total_bill' , data=tips)
plt.show()

sns.violinplot(x='day',y='total_bill' , data=tips)
plt.show()

sns.catplot(x='day',y='total_bill' , data=tips)
plt.show()

sns.lineplot(x='day',y='total_bill' , data=tips)
plt.show()

sns.relplot(x='day',y='total_bill' , data=tips)
plt.show()

sns.swarmplot(x='day',y='total_bill' , data=tips)
plt.show()

sns.stripplot(x='day',y='total_bill' , data=tips)
plt.show()

sns.histplot(x='day',y='total_bill' , data=tips)
plt.show()

sns.pairplot(tips)
plt.show()

sns.rugplot(tips["total_bill"])
plt.show()

sns.kdeplot(tips["total_bill"] ,fill=True)
plt.show()

sns.displot(tips)
plt.show()

sns.countplot(x='day',data=tips)
plt.show()

fmri=sns.load_dataset("fmri")
sns.scatterplot(x='timepoint',y='signal',data=fmri)
plt.show()

# Import necessary libraries
from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import accuracy_score, classification_report
from sklearn.datasets import load_iris

# Load the Iris dataset
iris = load_iris()
X = iris.data  # Features
y = iris.target  # Target variable

# Split the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Initialize the k-NN classifier
knn_classifier = KNeighborsClassifier(n_neighbors=3)  # Here, we set k=3

# Train the classifier on the training data
knn_classifier.fit(X_train, y_train)

# Make predictions on the test data
y_pred = knn_classifier.predict(X_test)

# Evaluate the model
accuracy = accuracy_score(y_test, y_pred)
classification_rep = classification_report(y_test, y_pred)

# Print the results
print(f"Accuracy: {accuracy:.2f}")
print("Classification Report:\n", classification_rep)
